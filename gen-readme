#!/bin/sh
exec scala "$0" "$@"
!#

import java.io.File
import scala.collection.mutable.ArrayBuffer
import scala.io.Source



val file = new File("./src/test/scala/com/mahpella/entities/reading/caseclasses/docs/ReadTest.scala")
val source = Source.fromFile(file)
val lines = source.getLines()



sealed trait LineType

case class Doc(line: String) extends LineType

case class Code(line: String) extends LineType

sealed trait ControlDirective extends LineType

object Begin extends ControlDirective

object End extends ControlDirective

object LineType{
  def apply(line: String) = {
    if (line.startsWith("// doc begin")) Begin
    else if (line.startsWith("// doc end")) End
    else if (line.startsWith("// ")) Doc(line.drop(3))
    else Code(line)
  }
}


class CodeBlock(line: String) {
  private val lines = ArrayBuffer[String]()
  add(line)

  def add(line: String) = lines += line

  def end() {
    val pad = lines.map(_.prefixLength(_.isWhitespace)).min
    println("")
    println("```scala")
    lines.foreach(x => println(x.drop(pad)))
    println("```")
    println("")

  }
}

var block: CodeBlock = _

lines.toSeq.map(LineType.apply).:+(End).foldLeft[LineType](End)({
  // end
  case (End, Begin) => Begin
  case (End, _) => End

  // begin
  case (Begin, doc @ Doc(line)) => {
    println(line)
    doc
  }
  case (Begin, code @ Code(line)) => {
    block = new CodeBlock(line)
    code
  }
  case (Begin, End) => End
  case (Begin, Begin) => Begin

  // doc
  case (doc @ Doc(_), Begin) => doc
  case (Doc(_), End) => End
  case (Doc(_), doc @ Doc(line)) => {
    println(line)
    doc
  }
  case (Doc(_), code @ Code(line)) => {
    block = new CodeBlock(line)
    code
  }

  // code
  case (code @ Code(_), Begin) => code
  case (Code(_), End) => {
    block.end()
    End
  }
  case (Code(_), doc @ Doc(line)) => {
    block.end()
    println(line)
    doc
  }
  case (Code(_), code @ Code(line)) => {
    block.add(line)
    code
  }
})